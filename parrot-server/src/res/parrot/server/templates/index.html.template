<!DOCTYPE HTML>
<html>
	<head>
		<title>Parrot @{parrotVersion} (Zetes @{zetesVersion})</title>
		<link rel="stylesheet" type="text/css" href="/css/main.css"/>
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0"/> <!--320-->
		<svg height="0" xmlns="http://www.w3.org/2000/svg">
			<filter id="drop-shadow">
				<feGaussianBlur in="SourceAlpha" stdDeviation="3"/>
				<feOffset dx="1" dy="2" result="offsetblur"/>
				<feFlood flood-color="rgba(0,0,0,0.4)"/>
				<feComposite in2="offsetblur" operator="in"/>
				<feMerge>
					<feMergeNode/>
					<feMergeNode in="SourceGraphic"/>
				</feMerge>
			</filter>
		</svg>
		<script>
			ajaxTimeout = 10000;
			messagesLoadInterval = 300;
			lastMessageIsOurs = false;
			
			function sortedLocationOf(element, array, start, end) {
				// quicksort()-like function
				start = start || 0;
				end = end || array.length;
				var pivot = parseInt(start + (end - start) / 2, 10);
				while (true) {
					if (end - start <= 1 || array[pivot] === element) {
						return pivot;
					}
					if (array[pivot].valueOf() < element.valueOf()) {
						start = pivot;
					} else {
						end = pivot;
					}
				}
			}
			
			function sortedInsert(element, array) {
				array.splice(sortedLocationOf(element, array) + 1, 0, element);
				return array;
			}
			
			var messages = [];
			
			function appendOrderedMessages(newMessages, users)
			{
				messages = messages.concat(newMessages);

				// Clearing messagesList
				//while (messagesList.firstChild) {
				//	messagesList.removeChild(messagesList.firstChild);
				//}
				
				for (var i = 0; i < newMessages.length; i++)
				{
					var msgItem = document.createElement('li');
					msgItem.className = "message";
					{
						var msgTitle = document.createElement('div');
						msgTitle.className = "msgTitle";
						{
					
							var msgUser = document.createElement('span');
							msgUser.className = "msgUser";
							{
								var msgUserText = document.createTextNode(users[messages[i].userId].name);
								msgUser.appendChild(msgUserText);
							}
							var msgTime = document.createElement('span');
							msgTime.className = "msgTime";
							{
								var date = new Date(messages[i].timeMillis);
								var msgTimeText = document.createTextNode(date.toLocaleDateString() + " " + date.toLocaleTimeString());
								msgTime.appendChild(msgTimeText);
							}
							msgTitle.appendChild(msgUser);
							msgTitle.appendChild(msgTime);
						}
						
						var msgText = document.createElement('div');
						msgText.className = "msgText";
						{
					    	var splittedMsg = messages[i].text.split("\n");
					    	for (var l = 0; l < splittedMsg.length; l++) {
								var msgTextPar = document.createElement('p');
								
						    	var msgTextParText = document.createTextNode(splittedMsg[l]);
					    		msgTextPar.appendChild(msgTextParText);
					    		msgText.appendChild(msgTextPar);
					    	}
					    	
					    	
					    }
					    	
					    msgItem.appendChild(msgTitle);
					    msgItem.appendChild(msgText);
				    }
					messagesList.appendChild(msgItem);
				}
			}
			
			function getUsersForMessages(msgs)
			{
				if (msgs.length > 0)
				{
					
					// Collecting user ids
					var userIds = [];
					for (var i = 0; i < msgs.length; i++)
					{
						if (userIds.indexOf(msgs[i].userId) == -1)
						{
							userIds.push(msgs[i].userId);
						}
					}
					
					var userIdsStr = "";
					for (var i = 0; i < userIds.length - 1; i++)
					{
						userIdsStr += userIds[i] + ",";
					}
					if (userIds.length > 0)
					{
						userIdsStr += userIds[userIds.length - 1];
					}
			
					var xmlhttp = new XMLHttpRequest();
					xmlhttp.onreadystatechange = function()
					{
						if (xmlhttp.readyState == 4)
   		 				{
							var usersResponse = { message: "No response from the server" };
							if (xmlhttp.responseText != "") {
								usersResponse = JSON.parse(xmlhttp.responseText);
							}

							if (xmlhttp.status == 200) {
								appendOrderedMessages(msgs, usersResponse);
								if (msgs.length > 0 && lastMessageIsOurs) {
									lastMessageIsOurs = false;
									scrollDown();
									if (typeof messageTextArea !== 'undefined') { 
										messageTextArea.focus();
									}
								}
							}
							else
							{
								sendErrorMessage.innerHTML = usersResponse.message;
							}
    					}
				  	}
				
					xmlhttp.ontimeout = function ()
					{ 
						sendErrorMessage.innerHTML = "Can't connect to the server.";
					}
				
					xmlhttp.open("GET", "/api/users?ids=" + userIdsStr, true);
					xmlhttp.timeout = ajaxTimeout;
					xmlhttp.send();
				}
				
				return false;	// Don't actually submit anything
			}
			
			serverTimeMillis = 0;
			function getLatestMessages()
			{
				var xmlhttp = new XMLHttpRequest();
				xmlhttp.onreadystatechange = function()
				{
					if (xmlhttp.readyState == 4)
    				{
						if (xmlhttp.responseText != "") {
							var messagesSliceResponse = JSON.parse(xmlhttp.responseText);
							
							if (xmlhttp.status == 200) {
								serverTimeMillis = messagesSliceResponse.serverTimeMillis;
								messages = messagesSliceResponse.messages;
								getUsersForMessages(messages);
							}
							else
							{
								sendErrorMessage.innerHTML = messagesSliceResponse.message;
							}
						}
						
						setTimeout("getLatestMessages()", messagesLoadInterval);
    				}
			  	}
				
				xmlhttp.ontimeout = function ()
				{ 
					sendErrorMessage.innerHTML = "Can't connect to the server.";
					setTimeout("getLatestMessages()", messagesLoadInterval * 5);
				}
				
				xmlhttp.open("GET", "/api/messages_since?sinceTimeMillis=" + serverTimeMillis, true);
				xmlhttp.timeout = ajaxTimeout;
				xmlhttp.send();
				
				return false;	// Don't actually submit anything
			}
			
			function scrollDown() {
				window.scrollTo(0,document.body.scrollHeight);
			}
		</script>	
		<script>

	@if{loggedIn}
			function clearCookie(cname) {
 				document.cookie = cname + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
			}

			function logout() {
				logoutButton = document.getElementById("logoutButton");
				logoutButton.disabled = true;
				
				var xmlhttp = new XMLHttpRequest();

				xmlhttp.onreadystatechange = function()
				{
					if (xmlhttp.readyState == 4)
    				{
    					if (xmlhttp.status == 200) {
    						clearCookie("sessionId");
    					}
    					window.location.reload();
    				}
			  	}
				
				xmlhttp.ontimeout = function ()
				{ 
					alert("Can't connect to the server.");
					logoutButton.disabled = false;
				}
				
				xmlhttp.open("GET", "/api/logout", true);
				xmlhttp.timeout = ajaxTimeout;
				xmlhttp.send();
				
				return false;	// Don't actually submit anything
			}

			savedScrollHeight = 0;
			function messageChanged() {
				sendMessageButton.disabled = (messageTextArea.value == "");
				if (savedScrollHeight > messageTextArea.scrollHeight) {
					messageTextArea.setAttribute("style", messageTextArea_basicStyle + "; height: auto;");
				}
				savedScrollHeight = messageTextArea.scrollHeight;
				messageTextArea.setAttribute("style", messageTextArea_basicStyle + "; height: " + messageTextArea.scrollHeight + "px;");
				//scrollDown();
				
				return false;
			}

			function sendMessage() {
				sendMessageButton = document.getElementById("sendMessageButton");
				sendMessageButton.disabled = true;
				messageTextArea.disabled = true;
				
				var xmlhttp = new XMLHttpRequest();

				xmlhttp.onreadystatechange = function()
				{
					if (xmlhttp.readyState == 4)
    				{
						var messageResponse = { message: "No response from the server" };
						if (xmlhttp.responseText != "") {
							messageResponse = JSON.parse(xmlhttp.responseText);
						}
						
    					if (xmlhttp.status == 200) {
    						messageTextArea.value = "";
    						sendErrorMessage.innerHTML = "";
							messageChanged();
							lastMessageIsOurs = true;
    					}
						else
						{
							sendErrorMessage.innerHTML = messageResponse.message;
						}
						sendMessageButton.disabled = false;
						messageTextArea.disabled = false;
    				}
			  	}
				
				xmlhttp.ontimeout = function ()
				{ 
					alert("Can't connect to the server.");
					sendMessageButton.disabled = false;
					messageTextArea.disabled = false;
				}
				
				xmlhttp.open("POST", "/api/add_message", true);
				xmlhttp.setRequestHeader("Content-type","text/plain; charset=UTF-8");
				xmlhttp.timeout = ajaxTimeout;
				xmlhttp.send(messageTextArea.value);
				
				return false;	// Don't actually submit anything
			}
	@else
			function setCookie(cname, cvalue, expirationTimeMillis)
			{
				var d = new Date();
				d.setTime(d.getTime() + expirationTimeMillis);
				var expires = "expires=" + d.toUTCString();
				document.cookie = cname + "=" + cvalue + "; " + expires;
			}
			
			function loginFormSetEnabled(enabled)
			{
				loginInput = document.getElementById("loginInput");
				passwordInput = document.getElementById("passwordInput");
				loginButton = document.getElementById("loginButton");
			
				loginInput.disabled = !enabled;
				passwordInput.disabled = !enabled;
				loginButton.disabled = !enabled;
			}

			function login() {
				loginInput = document.getElementById("loginInput");
				passwordInput = document.getElementById("passwordInput");
				loginButton = document.getElementById("loginButton");
				errorMessage = document.getElementById("errorMessage");

				errorMessage.innerHTML = "";
				
				loginFormSetEnabled(false);
				
				var xmlhttp = new XMLHttpRequest();

				xmlhttp.onreadystatechange = function()
				{
					if (xmlhttp.readyState == 4)
    				{
						var loginResponse = { message: "No response from the server" };
						if (xmlhttp.responseText != "")	{
							loginResponse = JSON.parse(xmlhttp.responseText);
						}

    					if (xmlhttp.status == 200) {
    						setCookie("sessionId", loginResponse.id, loginResponse.expirationTimeMillis);
    						window.location.reload();
    					} else {
    						loginFormSetEnabled(true);
    						errorMessage.innerHTML = loginResponse.message;
    					}
    				}
			  	}
				
				xmlhttp.ontimeout = function ()
				{ 
					loginFormSetEnabled(true);
					errorMessage.innerHTML = "Can't connect to the server.";
				}
				
				xmlhttp.open("GET", "/api/login?login=" + loginInput.value + "&password=" + passwordInput.value, true);
				xmlhttp.timeout = ajaxTimeout;
				xmlhttp.send();
				
				return false;	// Don't actually submit anything
			}
			
			function registrationFormSetEnabled(enabled)
			{
				regUserNameInput.disabled = !enabled;
				regLoginInput.disabled = !enabled;
				regPasswordInput1.disabled = !enabled;
				regPasswordInput2.disabled = !enabled;
				regSubmitButton.disabled = !enabled;
			}
			
			function register() {
				regUserNameInput = document.getElementById("regUserNameInput");
				regLoginInput = document.getElementById("regLoginInput");
				regPasswordInput1 = document.getElementById("regPasswordInput1");
				regPasswordInput2 = document.getElementById("regPasswordInput2");
				regSubmitButton = document.getElementById("regSubmitButton");
				regErrorMessage = document.getElementById("regErrorMessage");
			
				regErrorMessage.innerHTML = "";

				registrationFormSetEnabled(false);

				var xmlhttp = new XMLHttpRequest();
				xmlhttp.onreadystatechange = function()
				{
					if (xmlhttp.readyState == 4)
	 				{
						var registerResponse = { message: "No response from the server" };
						if (xmlhttp.responseText != "") {
							registerResponse = JSON.parse(xmlhttp.responseText);
						}
						
	 					if (xmlhttp.status == 201)
	 					{
	 						loginInput = document.getElementById("loginInput");
							passwordInput = document.getElementById("passwordInput");
							loginInput.value = regLoginInput.value;
							passwordInput.value = regPasswordInput1.value;
							login();
						} 
						else
						{
							registrationFormSetEnabled(true);
							regErrorMessage.innerHTML = registerResponse.message;
						}
					}
			  	}
			
				xmlhttp.open("GET", 
					"/api/register?name=" + regUserNameInput.value + 
								"&login=" + regLoginInput.value + 
								"&password1=" + regPasswordInput1.value + 
								"&password2=" + regPasswordInput2.value, true);
				xmlhttp.send();

				return false;	// Don't actually submit anything
			}
	@end
		</script>
	</head>
	@if{loggedIn}
	<body class="in">

		<div class="pageIn">
	@else	
	<body class="out">
		<div class="pageOut">
	@end
	@if{loggedIn}
			<div class="messagesContainerIn">
	@else
			<div class="regLogContainer">
				<div class="regLogPanel panel">
					<h3>Login</h3>
					<form>
						<table>
							<tr>
								<td>Login:</td><td><input id="loginInput" type="text"/></td>
							</tr>
							<tr>
								<td>Password:</td><td><input id="passwordInput" type="password"/></td>
							</tr>
							<tr>
								<td><input class="regLogPanelButton" id="loginButton" type="submit" onclick="return login();" value="Log in" /></td>
								<td><div class="errorMessage" id="errorMessage" /></td>
							</tr>
						</table>
					</form>
				</div>
				<div class="regLogPanel panel">
					<h3>Registration</h3>
					<form>
						<table>
							<tr>
								<td>User name:</td><td><input id="regUserNameInput" type="text"/></td>
							</tr>
							<tr>
								<td>Login:</td><td><input id="regLoginInput" type="text"/></td>
							</tr>
							<tr>
								<td>Password:</td><td><input id="regPasswordInput1" type="password"/></td>
							</tr>
							<tr>
								<td>Confirm:</td><td><input id="regPasswordInput2" type="password"/></td>
							</tr>
							<tr>
								<td><input class="regLogPanelButton" id="regSubmitButton" type="submit" onclick="return register();" value="Register" /></td><td><div class="errorMessage" id="regErrorMessage" /></td>
							</tr>
						</table>
						
					</form>
				</div>
			</div>
			<div class="messagesContainerOut">
	@end
				<ul class="messages" id="messagesList">
					<!-- Messages go here -->
				</ul>
			</div>
	@if{loggedIn}
			<div class="sendMessagePanel panel">
				<form>
					
					<table>
						<tr>
							<td colspan="2">
								<textarea class="messageTextArea" id="messageTextArea" style="resize: none; overflow: hidden;" oninput="messageChanged();"></textarea>
							</td>
						</tr>
						<tr>
							<td>
								<div class="errorMessage" id="sendErrorMessage" />
							</td>
							<td>
								<input class="sendMessageButton" id="sendMessageButton" type="submit" onclick="return sendMessage();" value="Send" />
							</td>
						</tr>
					</table>
				</form>
			</div>
			
			<div class="titlePanelIn panel">
				<img class="userIconIn shadowed" style="background-image: url('/masked/parrot_mid_color.png?r=192&g=10&b=10')" src="/images/parrot_mid_bw.png" />
				<form class="logoutForm">
					<div class="titlePanelTextIn">
						<div class="vcenter">
							User <span class="userName" id="userName">@{userName}</span> is logged in
							<input class="logout" id="logoutButton" type="submit" onclick="return logout();" value="Logout" />
						</div>
					</div>
				</form>
			</div>
		</div>
	@else
			<div class="titlePanelOut panel">
				<img class="userIconOut shadowed" style="background-image: url('/masked/parrot_big_color.png?r=192&g=10&b=10')" src="/images/parrot_big_bw.png" />
				<div class="titlePanelTextOut">
					<div class="vcenter">
						<span class="welcome">Welcome to this <b>Parrot</b>-powered chat!</span><br/>
						Please, log in or register. Or you may just read the conversation anonymously...
					</div>
				</div>
			</div>
		</div>
	@end
	
		<script type="text/javascript">
	@if{loggedIn}
			messageTextArea = document.getElementById("messageTextArea");
			messageTextArea_basicStyle = messageTextArea.getAttribute("style");
			sendErrorMessage = document.getElementById("sendErrorMessage");
			messageChanged();
	@end
			messagesList = document.getElementById("messagesList");
			getLatestMessages();
		</script>
	</body>
</html>